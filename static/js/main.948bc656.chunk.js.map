{"version":3,"sources":["AllRequests.js","Request.js","serviceWorker.js","index.js"],"names":["AllRequests","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createTasks","bind","assertThisInitialized","fridgeRepairRequest","_this2","react_default","a","createElement","onClick","delete","key","text","listfridgeRepairRequests","entries","map","className","Component","Request","state","fridgeRepairRequests","addrequest","deleterequest","e","inputElement","value","name","address","number","newRequest","Date","now","setState","prevState","concat","xhr","XMLHttpRequest","open","type","send","console","log","preventDefault","filteredRequests","filter","request","onSubmit","ref","placeholder","maxLength","AllRequests_AllRequests","Boolean","window","location","hostname","match","ReactDOM","render","Request_Request","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.948bc656.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class AllRequests extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createTasks = this.createTasks.bind(this);\n  }\n\n  createTasks(fridgeRepairRequest) {\n    return (\n      <li\n        onClick={() => this.delete(fridgeRepairRequest.key)}\n        key={fridgeRepairRequest.key}\n      >\n        {fridgeRepairRequest.text}\n      </li>\n    );\n  }\n\n  delete(key) {\n    this.props.delete(key);\n  }\n\n  render() {\n    var todoEntries = this.props.entries;\n    var listfridgeRepairRequests = todoEntries.map(this.createTasks);\n\n    return <ul className=\"theList\">{listfridgeRepairRequests}</ul>;\n  }\n}\n","import React, { Component } from \"react\";\nimport AllRequests from \"./AllRequests.js\";\nimport \"./Request.css\";\nimport \"./bootstrap/css/bootstrap.min.css\";\n\nexport default class Request extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fridgeRepairRequests: []\n    };\n\n    this.addrequest = this.addrequest.bind(this);\n    this.deleterequest = this.deleterequest.bind(this);\n  }\n\n  addrequest(e) {\n    if (\n      this.inputElement.value !== \"\" &&\n      this.name.value !== \"\" &&\n      this.address.value !== \"\" &&\n      this.number.value\n    ) {\n      var newRequest = {\n        text: this.inputElement.value,\n        key: Date.now()\n      };\n\n      this.setState(prevState => {\n        return {\n          fridgeRepairRequests: prevState.fridgeRepairRequests.concat(\n            newRequest\n          )\n        };\n      });\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.telegram.org/bot667797791:AAEO-pOPrPH3sDPZTNUKnwR7Wt8RJrIDvj4/sendMessage?chat_id=855636692&parse_mode=html&text=Сообщение с сайта:\" +\n        \"%0AИмя: \" +\n        this.name.value +\n        \"%0AНомер телефона: \" +\n        this.number.value +\n        \"%0AАдрес: \" +\n        this.address.value +\n        \"%0AТип услуги: \" +\n        this.type.value +\n        \"%0AОписание: \" +\n        newRequest.text,\n      true\n    );\n    xhr.send();\n\n    this.inputElement.value = \"\";\n\n    this.name.value = \"\";\n\n    this.address.value = \"\";\n\n    this.number.value = \"\";\n\n    console.log(this.state.fridgeRepairRequests);\n\n    e.preventDefault();\n  }\n\n  deleterequest(key) {\n    var filteredRequests = this.state.fridgeRepairRequests.filter(function(\n      request\n    ) {\n      return request.key !== key;\n    });\n\n    this.setState({\n      fridgeRepairRequests: filteredRequests\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"todoListMain\">\n        <div className=\"header\">\n          <form className=\"container inputs\" onSubmit={this.addrequest}>\n            <div className=\"row\">\n              <div className=\"col-xl flex\">\n                <select className=\"select\" ref={type => (this.type = type)}>\n                  <option>Ремонт</option>\n                  <option>Диагностика</option>\n                  <option>Продажа на запчасти</option>\n                </select>\n              </div>\n              <div className=\"col-xl flex\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  placeholder=\"Ваше имя:\"\n                  ref={name => (this.name = name)}\n                />\n              </div>\n              <div className=\"col-xl flex\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  placeholder=\"Ваш номер телефона:\"\n                  ref={number => (this.number = number)}\n                />\n              </div>\n              <div className=\"col-xl flex\">\n                <input\n                  placeholder=\"Ваш адрес:\"\n                  className=\"input\"\n                  type=\"text\"\n                  ref={address => (this.address = address)}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-xl flex\">\n                <textarea\n                  maxLength=\"70\"\n                  ref={request => (this.inputElement = request)}\n                  placeholder=\"Комментарии...\"\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-xl flex\">\n                <p>Оставьте адрес, номер телефона, краткое описание поломки</p>\n              </div>\n            </div>\n\n            <div className=\"allreq\">\n              <AllRequests\n                entries={this.state.fridgeRepairRequests}\n                delete={this.deleterequest}\n              />\n            </div>\n            <div className=\"row\">\n              <div className=\"col-xl flex\">\n                <button type=\"submit\">Отправить </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Request from \"./Request\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Request />, document.getElementById(\"react\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}